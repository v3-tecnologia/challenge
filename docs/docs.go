// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "support@exemplo.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/telemetry/gps": {
            "post": {
                "description": "Recebe um payload JSON com os dados de GPS, valida, e publica em uma fila NATS para processamento assíncrono.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Telemetry"
                ],
                "summary": "Enfileira dados de telemetria de GPS",
                "parameters": [
                    {
                        "description": "Dados de GPS",
                        "name": "gps",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GPSData"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/telemetry/gyroscope": {
            "post": {
                "description": "Recebe um payload JSON com os dados do giroscópio, valida, e publica em uma fila NATS para processamento assíncrono.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Telemetry"
                ],
                "summary": "Enfileira dados de telemetria de giroscópio",
                "parameters": [
                    {
                        "description": "Dados do Giroscópio",
                        "name": "gyroscope",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GyroscopeData"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/telemetry/photo": {
            "post": {
                "description": "Recebe um payload JSON com os dados da foto, valida, e publica em uma fila NATS para processamento assíncrono.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Telemetry"
                ],
                "summary": "Enfileira dados de telemetria de foto",
                "parameters": [
                    {
                        "description": "Dados da Foto a serem enviados",
                        "name": "photo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PhotoRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "models.GPSData": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "models.GyroscopeData": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                }
            }
        },
        "models.PhotoRequest": {
            "type": "object",
            "properties": {
                "device_id": {
                    "type": "string"
                },
                "photo": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "API de Telemetria de Frota",
	Description:      "Esta é a API para ingestão de dados de telemetria do Desafio Cloud.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
